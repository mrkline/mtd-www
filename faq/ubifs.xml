<PAGE>
<VAR match="VAR_ORIGIN" replace="../" />
<VAR match="VAR_CVSID" replace="Last updated: 6 Feb 2008, dedekind"/>
<INCLUDE file="../inc/header.tmpl" />

<VAR match="VAR_SEL_FAQ" replace="selected" />
<VAR match="VAR_SEL_UBIFS" replace="selected" />
<PARSE file="../menu1.xml" />

<INCLUDE file="../inc/content.tmpl" />

<H1>UBIFS FAQ and HOWTO</H1>

<H2>Table of contents</H2>
<OL>
	<LI><A HREF="ubifs.html#L_mount_ubifs">How to mount UBIFS?</A></LI>
	<LI><A HREF="ubifs.html#L_mkfubifs">How to create an UBIFS image?</A></LI>
	<LI><A HREF="ubifs.html#L_ubifs_nandsim">How to use UBIFS with nandsim?</A></LI>
</OL>



<A NAME="L_mount_ubifs"><H2>How to mount UBIFS?</H2></A>

<P>UBIFS mounts UBI volumes, not UBI devices, not MTD devices. There are no
block device nodes corresponding to UBI volumes exist in <CODE>/dev</CODE>,
and UBIFS uses device-less mount, just like <CODE>procfs</CODE> or
<CODE>sysfs</CODE>. The volume to mount is specified using <CODE>ubiX_Y</CODE>
or <CODE>ubiX:NAME</CODE> syntax, where</P>

<UL>
	<LI><CODE>X</CODE> - UBI device number;</LI>
	<LI><CODE>Y</CODE> - UBI volume number;</LI>
	<LI><CODE>NAME</CODE> - UBI volume name.</LI>
</UL>

<P>For example,</P>

<PRE>
$ mount -t ubifs ubi0_0 /mnt/ubifs
</PRE>

<P>mounts volume 0 on UBI device 0 to <CODE>/mnt/ubifs</CODE>, and</P>

<PRE>
$ mount -t ubifs ubi0:rootfs /mnt/ubifs
</PRE>

<P>mounts "rootfs" volume of UBI device 0 to <CODE>/mnt/ubifs</CODE> ("rootfs" is
volume name. This method of specifying UBI volume is more preferrable because
it does not depend on device/volume numbers, which may change.</P>

<P>Note, if <CODE>X</CODE> is not specified, UBIFS uses 0, i.e.,
"<CODE>ubi0:rootfs</CODE>" and "<CODE>ubi:rootfs</CODE>" are
equivalent.</P>

<P>Some environments like busybox are confused by the ":" delimeter (e.g.,
<CODE>ubi:rootfs</CODE>) and "!" may be used instead (e.g.,
<CODE>ubi!rootfs</CODE>).</P>

<P>The following is an example of the kernel boot arguments to attach
<CODE>mtd0</CODE> to UBI and mount volume "rotfs":</P>

<PRE>
ubi.mtd=0 root=ubi0:rootfs rootfstype=ubifs
</PRE>

<P>Please, refer <A HREF="ubi.html#L_attachmtd">this</A> section for
information about how to create UBI devices and
<A HREF="ubi.html#L_mkvol">this</A> section for information about how to create
UBI volumes.</P>



<A NAME="L_mkfubifs"><H2>How to create an UBIFS image?</H2></A>

<P>UBIFS images are created by the
<A HREF="../doc/ubifs.html#L_usptools"><CODE>mkfs.ubifs</CODE></A> and
<A HREF="../doc/ubi.html#L_usptools"><CODE>ubi-nize</CODE></A> utilities.
The below example demonstrates how to create an UBI/UBIFS image for a 256MiB
OneNAND flash chip with 128KiB physical eraseblocks, 2048 bytes NAND pages, and
which supports 4 sub-pages (this means that MTD allows to do 4x512 bytes writes
to the same NAND page, which is quite typical for SLC flashes). The resulting
image will have one UBI volume storing UBIFS file-system.</P>

<PRE>
$ mkfs.ubifs -r root-fs -m 2048 -e 129024 -c 2047 -o ubifs.img
$ ubi-nize -o ubi.img -m 2048 -p 128KiB -s 512 ubi-nize.cfg
</PRE>

<P>where <CODE>ubi-nize.cfg</CODE> contains:</P>

<PRE>
$ cat ubi-nize.cfg
[ubifs]
mode=ubi
image=ubifs.img
vol_id=0
vol_size=200MiB
vol_type=dynamic
vol_name=rootfs
vol_alignment=1
vol_flags=autoresize
</PRE>

<P>Some comments about what the options mean:</P>

<UL>
	<LI><CODE>-r root-fs</CODE>: tells <CODE>mkfs.ubifs</CODE> to create an
	UBIFS image which would have identical contents as the local
	<CODE>root-fs</CODE> directory has;</LI>

	<LI><CODE>-m 2048</CODE>: tells <CODE>mkfs.ubifs</CODE> that the minimum
	input/output unit size of the flash this UBIFS image is created for is
	2048 bytes;</LI>

	<LI><CODE>-e 129024</CODE>: logical eraseblock size of the UBI volume
	this image is created for;</LI>

	<LI><CODE>-c 2047</CODE>: specifies maximum file-system size in logical
	eraseblocks; this means that it will be possible to use the resulting
	file-system on volumes up to this size (less or equivalent); so in this
	particular case, the resulting FS may be put on volumes up to about
	251MiB (129024 multiplied by 2047);</LI>

	<LI><CODE>-p 128KiB</CODE>: tells <CODE>ubi-nize</CODE> that physical
	eraseblock size of the flash chip the UBI image is created for is
	128KiB (128 * 1024 bytes);</LI>

	<LI><CODE>-s 512</CODE>: tells <CODE>ubi-nize</CODE> that the flash
	supports sub-pages and sub-page size is 512 bytes; <CODE>ubi-nize</CODE>
	will take this into account and put the VID header to the same NAND
	page as the EC header.</LI>
</UL>

<P>The <CODE>ubi-nize</CODE> utility requires volumes description file which has
standard <CODE>.ini</CODE> file syntax. One UBI image may contain many UBI
volumes with different characteristics and it is difficult to invent a nice
command-line interface for specifying those characteristics, this is why the
utility requires the volumes description file.</P>

<P>The example configuration file tells <CODE>ubi-nize</CODE> to create an UBI
image which has a singe 200MiB dynamic volume with ID 0, name "rootfs", and
alignment 1. The configuration file also sets the "autoresize" volume flag,
which means that the volume will be automatically enlarged by UBIFS to have
the maximum possible size when it runs for the first time. See
<A HREF="../doc/ubi.html#L_autoresize">here</A> for more information about what
is the auto-resize trick.</P>

<P>Run <CODE>ubinize -h</CODE> and <CODE>mkfs.ubifs -h</CODE> for more
information and for more possibilities to tweak images.</P>


<A NAME="L_ubifs_nandsim"><H2>How to use UBIFS with nandsim?</H2></A>

<P>The same way as with any MTD device. Here is an example of how to load
<CODE>nandsim</CODE>, create an UBI volume and mount it.</P>

<PRE>
# Create an 256MiB emulated NAND flash
modprobe nandsim first_id_byte=0x20 second_id_byte=0xaa \
                 third_id_byte=0x00 fourth_id_byte=0x15

# MTD is not LDM-enabled and udev does not create device \
  MTD device nodes automatically, so create /dev/mtd0
mknod /dev/mtd0 c 90 0

# Load UBI module and attach mtd0
modprobe ubi mtd=0

# Create a 200MiB UBI volume with name "ubifs-vol"
ubi-mkvol /dev/ubi0 -N ubifs-vol -s 200MiB

# Mount UBIFS
mount -t ubifs ubi0:ubifs-vol /mnt/ubifs
</PRE>

<INCLUDE file="../inc/footer.tmpl" />
</PAGE>
