<PAGE>
<VAR match="VAR_ORIGIN" replace="../" />
<VAR match="VAR_CVSID" replace="$Id: general.xml,v 1.2 2006/03/31 14:57:32 jwboyer Exp $"/>
<INCLUDE file="../inc/header.tmpl" />

<VAR match="VAR_SEL_FAQ" replace="selected" />
<VAR match="VAR_SEL_GENERAL" replace="selected" />
<PARSE file="../menu1.xml" />

<INCLUDE file="../inc/content.tmpl" />



<H2>Table of contents</H2>
<OL>
	<LI><A HREF="general.html#L_mtd_what">Is an MTD device a block device or a char device?</A></LI>
	<LI><A HREF="general.html#L_mtdwww">I'd like to add/change/fix information on this Web-site - how?</A></LI>
	<LI><A HREF="general.html#L_mtd_vs_hdd">What are the differences between flash devices and block drives?</A></LI>
	<LI><A HREF="general.html#L_ext2_mtd">Can I mount ext2 over an MTD device?</A></LI>
	<LI><A HREF="general.html#L_point">What are the point() and unpoint() functions used for?</A></LI>
	<LI><A HREF="general.html#L_unlock">I keep getting errors whenever I try to write or erase to my MTD device</A></LI>
</OL>



<A NAME="L_mtd_what">
<H2>Is an MTD device a block device or a char device?</H2>
</A>

<P>
First off, an MTD is a "Memory Technology Device", so it's just "MTD". An "MTD
device" is a pleonasm.
</P>

<P>
Unix traditionally only knew block devices and character devices.
Character devices were things like keyboards or mice, that you could
read current data from, but couldn't be seek-ed and didn't have a size.
Block devices had a fixed size and could be seek-ed. They also happened
to be organized in blocks of multiple bytes, usually 512.
</P>

<P>
Flash doesn't match the description of either block or character devices.
They behave similar to block device, but have differences. For example,
block devices don't distinguish between write and erase operations.
Therefore, a special device type to match flash characteristics was created:
MTD.
</P>

<P>
So MTD is neither a block nor a char device. There are translations to
use them, as if they were. But those translations are nowhere near the
original, just like translated Chinese poems.
</P>



<A NAME="L_mtdwww">
<H2>I'd like to add/change/fix information on this Web-site - how?</H2>
</A>

<P>The sources of this Web-site are available at
<CODE>git://git.infradead.org/mtd-www.git</CODE>. Just do your modifications
and send the patch to the <A href="../mail.html">MTD mailing list</A>.</P>



<A NAME="L_mtd_vs_hdd">
<H2>What are the differences between flash devices and block drives?</H2>
</A>

<P>The following table describes the differences between block devices and
raw flashes. Note, SSD, MMC, eMMC, RS-MMC, SD, mini-SD, micro-SD, USB flash
drive, CompactFlash, MemoryStick, MemoryStick Micro, and other FTL devices
are <b>block devices</b>, not raw flash devices. Of course, hard drives are
also block devices.</P>

<TABLE cellpadding="5" cellspacing="0" border="1">
	<TR>
		<TD><B>Block drives</B></TD>
		<TD><B>MTD device</B></TD>
	</TR>
	<TR>
		<TD>Consists of sectors</TD>
		<TD>Consists of eraseblocks</TD>
	</TR>
	<TR>
		<TD>Sectors are small (512, 1024 bytes)</TD>
		<TD>Eraseblocks are larger (typically 128KiB)</TD>
	</TR>
	<TR>
		<TD>
			Maintains 2 main operations: <B>read sector</B> and
			<B>write sector</B>
		</TD>
		<TD>
			Maintains 3 main operations: <B>read from eraseblock</B>,
			<B>write to eraseblock</B>, and <B>erase eraseblock</B>
		</TD>
	</TR>
	<TR>
		<TD>
			Bad sectors are re-mapped and hidden by hardware (at
			least in modern LBA hard drives); in case of FTL
			devices it is the resposibility of FTL to provide this
		</TD>
		<TD>
			Bad eraseblocks are not hidden and should be dealt with
			in software
		</TD>
	</TR>
	<TR>
		<TD>Sectors are devoid of the wear-out property (in FTL devices
			it is the resposibility of FTL to provide this) </TD>
		<TD>
			Eraseblocks wear-out and become bad and unusable after
			about 10<SUP>3</SUP> (for MLC NAND) - 10<SUP>5</SUP>
			(NOR, SLC NAND) erase cycles
		</TD>
	</TR>
</TABLE>

<P>
So as one sees flashes (MTD devices) are somewhat more difficult to work
with.
</P>



<A NAME="L_ext2_mtd">
<H2>Can I mount ext2 over an MTD device?</H2>
</A>

<P>
Ext2, ext3, XFS, JFS, FAT and other "conventional" file systems work with block
devices. They are designed this way. Flashes are not block devices, they are
very different beasts. Please, read <A HREF="general.html#L_mtd_what">this</A>,
and <A HREF="general.html#L_mtd_vs_hdd">this</A> FAQ entries.
</P>

<P>
Please, do not be confused by USB stick, MMC, SD, CompactFlash and other popular
removable devices. Although they are also called "flash", they are not MTD devices.
They are out of MTD subsystem's scope. Please, read
<A HREF="jffs2.html#L_hdd_jffs2">this</A> FAQ entry.
</P>

<P>
In order to use one of conventional file systems over an MTD device, you need a
software layer which emulates a block device over the MTD device. These layers
are often called <I>Flash Translation Layers</I> (<I>FTLs</I>).
</P>

<P>
There is an <U>extremely</U> simple FTL layer in Linux MTD subsystem -
<CODE>mtdblock</CODE>. It emulates block devices over MTD devices. There is
also an <CODE>mtdblock_ro</CODE> module which emulates read-only block devices.
When you load this module, it creates a block device for each MTD device in the
system. The block devices are then accessible via <CODE>/dev/mtdblockX</CODE>
device nodes.
</P>

<P>
But in many cases using <CODE>mtdblock</CODE> is a very bad idea because what
it basically does if you change any sector of you mtdblockX device, it reads
the whole corresponding eraseblock into the memory, erases the eraseblock,
changes the sector in RAM, and writes the whole eraseblock back. This is very
straightforward. If you have a power failure when the eraseblock is being
erased, you lose all the block device sectors in it. The flash will likely
decay soon because you will wear few eraseblocks out - most probably those ones
which contain FAT/bitmap/inode table/etc.
</P>

<P>
Unfortunately it is a rather difficult task to create a good FTL layer and
nobody still managed to implement one for Linux. But now when we have UBI
(see <A HREF="../doc/ubi.html">here</A>) it is much easier to do it on top of
UBI.
</P>

<P>
It makes sense to use <CODE>mtdblock_ro</CODE> for read-only file systems or
read-only mounts. For example, one may use SquashFS as it compresses data quite
well. But think twice before using <CODE>mtdblock</CODE> in read-write more.
And don't try to use it on NAND flash as it is does not handle bad
eraseblocks.
</P>



<A NAME="L_point">
<H2>What are the point() and unpoint() functions used for?</H2>
</A>

<P>
Mainly for NOR flash. As long as the flash is only read, it
behaves just like normal memory. The <CODE>read()</CODE> function for NOR chips
is essentially a <CODE>memcpy()</CODE>. For some purposes the extra
<CODE>memcpy()</CODE> is a waste of time, so things can be optimized.
</P>

<P>
So the <CODE>point()</CODE> function does just that, it returns a pointer to
the raw flash, so callers can operate directly on the flash.
</P>

<P>
But of course, things are a little more complicated than that. NOR
flash chips can be in several different modes and only when in read
mode will the above work. Therefore <CODE>point()</CODE> also locks the flash
chip in addition to returning a pointer. And while locked, writes to the same
flash chips have to wait. So callers have to call unpoint() soon after to
release the chip again.
</P>



<A NAME="L_unlock">
<H2>I keep getting errors whenever I try to write or erase to my MTD device</H2>
</A>

<P>
Some NOR chips power on with all of the eraseblocks in a locked state.
The MTD layer doesn't unlock these devices by default. If you are accessing
these devices from user-space, you can use the <CODE>flash_unlock</CODE> tool to
unlock the MTD device(s). If you are using the MTD device as aw rite-able root
file-system you will either need to have the boot loader unlock the eraseblocks
before booting the kernel, or add code to the MTD map driver for your board to
unlock them.
</P>

<P>Some chips that are known to have this behavior:</P>

<TABLE cellpadding="5" cellspacing="0" border="1">
	<TR>
		<TD>Manufacturer</TD>
		<TD>Part Number</TD>
	</TR>
	<TR>
		<TD>Intel</TD>
		<TD>28FxxxP30</TD>
	</TR>
	<TR>
		<TD></TD>
		<TD>GE28F256L30T</TD>
	</TR>
</TABLE>

<INCLUDE file="../inc/footer.tmpl" />
</PAGE>
