<PAGE>
	<VAR match="VAR_ORIGIN" replace="../" />
	<VAR match="VAR_CVSID" replace="$Id:$"/>
	<INCLUDE file="../inc/header.tmpl" />

	<VAR match="VAR_SEL_DOC" replace="selected" />
	<VAR match="VAR_SEL_UBI" replace="selected" />
	<PARSE file="../menu1.xml" />

	<INCLUDE file="../inc/content.tmpl" />

    <h2>UBI - Unsorted Block Images</h2>

    <p>UBI (Latin: "where?") manages multiple logical volumes on a single
    flash device, specifically supporting NAND flash devices. UBI provides
    a flexible partitioning concept which still allows for wear-levelling
    across the <strong>whole</strong> flash device.</p> 
    
    <p>In a sense, UBI may be compared to the Logical Volume Manager (LVM).
    Whereas LVM maps logical sector numbers to physical HDD sector numbers, UBI
    maps logical eraseblocks to physical eraseblocks.</p>

    <p>More information may be found in the UBI design documentation:
    <a href="../doc/ubidesign/ubidesign.pdf">ubidesign.pdf</a>.</p>

    <h3>Partitioning/Re-partitioning</h3>

    <p>An UBI volume occupies a certain number of erase blocks. This is limited
    by a configured maximum volume size, which could also be viewed as the
    partition size. Each individual UBI volume's size can be changed
    independently of the other UBI volumes, provided that the sum of all
    volume sizes doesn't exceed a certain limit.</p>

    <p>UBI supports <strong>dynamic</strong> volumes and
    <strong>static</strong> volumes. Static volumes are read-only and their
    contents are protected by CRC check sums.</p>

    <h3>Bad eraseblocks handling</h3>

    <p>UBI transparently handles bad eraseblocks. When a physical eraseblock
    becomes bad, it is substituted by a good physical eraseblock, and the user
    does not even notice this.</p>
    
    <h3>Scrubbing</h3>

    <p>On a NAND flash bit flips can occur on any write operation, sometimes
    also on read. If bit flips persist on the device, at first they can still
    be corrected by ECC, but once they accumulate, correction will become
    impossible. Thus it is best to actively <strong>scrub</strong> the
    affected eraseblock, by first copying it to a free eraseblock and then
    erasing the original. The UBI layer performs this type of scrubbing under
    the covers, transparently to the UBI volume users.</p>

    <h3>Erase Counts</h3>

    <p>UBI maintains an erase count header per eraseblock. This frees
    higher-level layers (like file systems) from doing this and allows for
    centralized erase count management instead. The erase counts are used by
    the wear-levelling algorithm in the UBI layer. The algorithm itself is
    exchangeable.</p>

    <h3>Booting from NAND</h3>

    <p>For booting directly from NAND flash the hardware must at least be
    capable of fetching and executing a small portion of the NAND flash. Some
    NAND flash controllers have this kind of support. They usually limit the
    window to a few kilobytes in erase block 0. This "initial program loader"
    (IPL) must then contain sufficient logic to load and execute the next boot
    phase.</p>

    <p>Due to bad eraseblocks, which may be randomly scattered over the flash
    device, it is problematic to store the  "secondary program loader" (SPL)
    statically. Also, due to bit-flips it may become corrupted over time. UBI
    allows to solve this problem gracefully by storing the SPL in a
    small static UBI volume.</p>

    <h2>UBI volumes vs. static partitions</h2>

    <p>UBI volumes are still very similar to static MTD partitions:</p>
    <ul>
        <li>both consist of eraseblocks (logical eraseblocks in case of UBI
	volumes, and physical eraseblocks in case of static partitions;</li>
	<li>both support three basic operations - read, write, erase.</li>	    
    </ul>

    <p>But UBI volumes have the following advantages over traditional
    static MTD partitions:</p>
    
    <ul>
        <li>there are no eraseblock wear-leveling constraints in case
        of UBI volumes, so the user should not care about this;</li>

        <li>there are no bit-flips and bad eraseblocks in case of UBI
	volumes.</li>
    </ul>

    <p>So, UBI volumes may be considered as flash devices with relaxed
    restrictions.</p>

	<INCLUDE file="../inc/footer.tmpl" />
</PAGE>
